{
  "Iktan.Ecommerce/getting-started.html": {
    "href": "Iktan.Ecommerce/getting-started.html",
    "title": "Getting Started | Iktan.Ecommerce",
    "keywords": "Getting Started"
  },
  "Iktan.Ecommerce/introduction.html": {
    "href": "Iktan.Ecommerce/introduction.html",
    "title": "Introduction | Iktan.Ecommerce",
    "keywords": "Introduction"
  },
  "api/Iktan.Ecommerce.App.DTO.CustomerDTO.html": {
    "href": "api/Iktan.Ecommerce.App.DTO.CustomerDTO.html",
    "title": "Class CustomerDTO | Iktan.Ecommerce",
    "keywords": "Class CustomerDTO Namespace Iktan.Ecommerce.App.DTO Assembly Iktan.Ecommerce.App.DTO.dll public class CustomerDTO Inheritance object CustomerDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Address public string Address { get; set; } Property Value string City public string City { get; set; } Property Value string CompanyName public string CompanyName { get; set; } Property Value string ContactName public string ContactName { get; set; } Property Value string ContactTitle public string ContactTitle { get; set; } Property Value string Country public string Country { get; set; } Property Value string CustomerId public string CustomerId { get; set; } Property Value string Fax public string Fax { get; set; } Property Value string Phone public string Phone { get; set; } Property Value string PostalCode public string PostalCode { get; set; } Property Value string Region public string Region { get; set; } Property Value string"
  },
  "api/Iktan.Ecommerce.App.DTO.UserDTO.html": {
    "href": "api/Iktan.Ecommerce.App.DTO.UserDTO.html",
    "title": "Class UserDTO | Iktan.Ecommerce",
    "keywords": "Class UserDTO Namespace Iktan.Ecommerce.App.DTO Assembly Iktan.Ecommerce.App.DTO.dll public class UserDTO Inheritance object UserDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstName public string FirstName { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string Password public string Password { get; set; } Property Value string Token public string Token { get; set; } Property Value string UserId public int UserId { get; set; } Property Value int UserName public string UserName { get; set; } Property Value string"
  },
  "api/Iktan.Ecommerce.App.DTO.html": {
    "href": "api/Iktan.Ecommerce.App.DTO.html",
    "title": "Namespace Iktan.Ecommerce.App.DTO | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.App.DTO Classes CustomerDTO UserDTO"
  },
  "api/Iktan.Ecommerce.App.Interface.ICustomerApplication.html": {
    "href": "api/Iktan.Ecommerce.App.Interface.ICustomerApplication.html",
    "title": "Interface ICustomerApplication | Iktan.Ecommerce",
    "keywords": "Interface ICustomerApplication Namespace Iktan.Ecommerce.App.Interface Assembly Iktan.Ecommerce.App.Interface.dll public interface ICustomerApplication Methods DeleteAsync(string) Task<Response<bool>> DeleteAsync(string CustomerId) Parameters CustomerId string Returns Task<Response<bool>> GetAllAsync() Task<Response<IEnumerable<CustomerDTO>>> GetAllAsync() Returns Task<Response<IEnumerable<CustomerDTO>>> GetAsync(string) Task<Response<CustomerDTO>> GetAsync(string CustomerId) Parameters CustomerId string Returns Task<Response<CustomerDTO>> InsertAsync(CustomerDTO) Task<Response<bool>> InsertAsync(CustomerDTO customerDTO) Parameters customerDTO CustomerDTO Returns Task<Response<bool>> UpdateAsync(CustomerDTO) Task<Response<bool>> UpdateAsync(CustomerDTO customerDTO) Parameters customerDTO CustomerDTO Returns Task<Response<bool>>"
  },
  "api/Iktan.Ecommerce.App.Interface.IUserApplication.html": {
    "href": "api/Iktan.Ecommerce.App.Interface.IUserApplication.html",
    "title": "Interface IUserApplication | Iktan.Ecommerce",
    "keywords": "Interface IUserApplication Namespace Iktan.Ecommerce.App.Interface Assembly Iktan.Ecommerce.App.Interface.dll public interface IUserApplication Methods Authenticate(string, string) Task<Response<UserDTO>> Authenticate(string userName, string password) Parameters userName string password string Returns Task<Response<UserDTO>>"
  },
  "api/Iktan.Ecommerce.App.Interface.html": {
    "href": "api/Iktan.Ecommerce.App.Interface.html",
    "title": "Namespace Iktan.Ecommerce.App.Interface | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.App.Interface Interfaces ICustomerApplication IUserApplication"
  },
  "api/Iktan.Ecommerce.App.Main.CustomerApplication.html": {
    "href": "api/Iktan.Ecommerce.App.Main.CustomerApplication.html",
    "title": "Class CustomerApplication | Iktan.Ecommerce",
    "keywords": "Class CustomerApplication Namespace Iktan.Ecommerce.App.Main Assembly Iktan.Ecommerce.App.Main.dll public class CustomerApplication : ICustomerApplication Inheritance object CustomerApplication Implements ICustomerApplication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomerApplication(ICustomerDomain, IMapper, IAppLogger<CustomerApplication>) public CustomerApplication(ICustomerDomain domain, IMapper mapper, IAppLogger<CustomerApplication> logger) Parameters domain ICustomerDomain mapper IMapper logger IAppLogger<CustomerApplication> Methods DeleteAsync(string) public Task<Response<bool>> DeleteAsync(string CustomerId) Parameters CustomerId string Returns Task<Response<bool>> GetAllAsync() public Task<Response<IEnumerable<CustomerDTO>>> GetAllAsync() Returns Task<Response<IEnumerable<CustomerDTO>>> GetAsync(string) public Task<Response<CustomerDTO>> GetAsync(string CustomerId) Parameters CustomerId string Returns Task<Response<CustomerDTO>> InsertAsync(CustomerDTO) public Task<Response<bool>> InsertAsync(CustomerDTO customerDTO) Parameters customerDTO CustomerDTO Returns Task<Response<bool>> UpdateAsync(CustomerDTO) public Task<Response<bool>> UpdateAsync(CustomerDTO customerDTO) Parameters customerDTO CustomerDTO Returns Task<Response<bool>>"
  },
  "api/Iktan.Ecommerce.App.Main.UserApplication.html": {
    "href": "api/Iktan.Ecommerce.App.Main.UserApplication.html",
    "title": "Class UserApplication | Iktan.Ecommerce",
    "keywords": "Class UserApplication Namespace Iktan.Ecommerce.App.Main Assembly Iktan.Ecommerce.App.Main.dll public class UserApplication : IUserApplication Inheritance object UserApplication Implements IUserApplication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserApplication(IUserDomain, IMapper, UserDtoValidator) public UserApplication(IUserDomain userDomain, IMapper mapper, UserDtoValidator userDtoValidator) Parameters userDomain IUserDomain mapper IMapper userDtoValidator UserDtoValidator Methods Authenticate(string, string) public Task<Response<UserDTO>> Authenticate(string userName, string password) Parameters userName string password string Returns Task<Response<UserDTO>>"
  },
  "api/Iktan.Ecommerce.App.Main.html": {
    "href": "api/Iktan.Ecommerce.App.Main.html",
    "title": "Namespace Iktan.Ecommerce.App.Main | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.App.Main Classes CustomerApplication UserApplication"
  },
  "api/Iktan.Ecommerce.App.Test.CustomWebApplicationFactory.html": {
    "href": "api/Iktan.Ecommerce.App.Test.CustomWebApplicationFactory.html",
    "title": "Class CustomWebApplicationFactory | Iktan.Ecommerce",
    "keywords": "Class CustomWebApplicationFactory Namespace Iktan.Ecommerce.App.Test Assembly Iktan.Ecommerce.App.Test.dll public class CustomWebApplicationFactory : WebApplicationFactory<Program>, IDisposable, IAsyncDisposable Inheritance object WebApplicationFactory<Program> CustomWebApplicationFactory Implements IDisposable IAsyncDisposable Inherited Members WebApplicationFactory<Program>.WithWebHostBuilder(Action<IWebHostBuilder>) WebApplicationFactory<Program>.GetTestAssemblies() WebApplicationFactory<Program>.CreateHostBuilder() WebApplicationFactory<Program>.CreateWebHostBuilder() WebApplicationFactory<Program>.CreateServer(IWebHostBuilder) WebApplicationFactory<Program>.CreateHost(IHostBuilder) WebApplicationFactory<Program>.CreateClient() WebApplicationFactory<Program>.CreateClient(WebApplicationFactoryClientOptions) WebApplicationFactory<Program>.CreateDefaultClient(params DelegatingHandler[]) WebApplicationFactory<Program>.ConfigureClient(HttpClient) WebApplicationFactory<Program>.CreateDefaultClient(Uri, params DelegatingHandler[]) WebApplicationFactory<Program>.Dispose() WebApplicationFactory<Program>.Dispose(bool) WebApplicationFactory<Program>.DisposeAsync() WebApplicationFactory<Program>.Server WebApplicationFactory<Program>.Services WebApplicationFactory<Program>.Factories WebApplicationFactory<Program>.ClientOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureWebHost(IWebHostBuilder) Gives a fixture an opportunity to configure the application before it gets built. protected override void ConfigureWebHost(IWebHostBuilder builder) Parameters builder IWebHostBuilder The IWebHostBuilder for the application."
  },
  "api/Iktan.Ecommerce.App.Test.UserApplicationTest.html": {
    "href": "api/Iktan.Ecommerce.App.Test.UserApplicationTest.html",
    "title": "Class UserApplicationTest | Iktan.Ecommerce",
    "keywords": "Class UserApplicationTest Namespace Iktan.Ecommerce.App.Test Assembly Iktan.Ecommerce.App.Test.dll [TestClass] public class UserApplicationTest Inheritance object UserApplicationTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Authenticate_WhenIncorrectParametersAreSent_ReturnsMessageUserDoesNotExist() [TestMethod] public void Authenticate_WhenIncorrectParametersAreSent_ReturnsMessageUserDoesNotExist() Authenticate_WhenNoParametersAreSent_ValidationErrorMessageIsReturned() [TestMethod] public void Authenticate_WhenNoParametersAreSent_ValidationErrorMessageIsReturned() Authenticate_WhenParametersAreSent_ReturnsSuccessfulMessage() [TestMethod] public void Authenticate_WhenParametersAreSent_ReturnsSuccessfulMessage() ClassInitialize(TestContext) [ClassInitialize] public static void ClassInitialize(TestContext _) Parameters _ TestContext"
  },
  "api/Iktan.Ecommerce.App.Test.html": {
    "href": "api/Iktan.Ecommerce.App.Test.html",
    "title": "Namespace Iktan.Ecommerce.App.Test | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.App.Test Classes CustomWebApplicationFactory UserApplicationTest"
  },
  "api/Iktan.Ecommerce.App.Validation.UserDtoValidator.html": {
    "href": "api/Iktan.Ecommerce.App.Validation.UserDtoValidator.html",
    "title": "Class UserDtoValidator | Iktan.Ecommerce",
    "keywords": "Class UserDtoValidator Namespace Iktan.Ecommerce.App.Validation Assembly Iktan.Ecommerce.App.Validation.dll public class UserDtoValidator : AbstractValidator<UserDTO>, IValidator<UserDTO>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<UserDTO> UserDtoValidator Implements IValidator<UserDTO> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<UserDTO>.Validate(UserDTO) AbstractValidator<UserDTO>.ValidateAsync(UserDTO, CancellationToken) AbstractValidator<UserDTO>.Validate(ValidationContext<UserDTO>) AbstractValidator<UserDTO>.ValidateAsync(ValidationContext<UserDTO>, CancellationToken) AbstractValidator<UserDTO>.CreateDescriptor() AbstractValidator<UserDTO>.RuleFor<TProperty>(Expression<Func<UserDTO, TProperty>>) AbstractValidator<UserDTO>.Transform<TProperty, TTransformed>(Expression<Func<UserDTO, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<UserDTO>.Transform<TProperty, TTransformed>(Expression<Func<UserDTO, TProperty>>, Func<UserDTO, TProperty, TTransformed>) AbstractValidator<UserDTO>.RuleForEach<TElement>(Expression<Func<UserDTO, IEnumerable<TElement>>>) AbstractValidator<UserDTO>.TransformForEach<TElement, TTransformed>(Expression<Func<UserDTO, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<UserDTO>.TransformForEach<TElement, TTransformed>(Expression<Func<UserDTO, IEnumerable<TElement>>>, Func<UserDTO, TElement, TTransformed>) AbstractValidator<UserDTO>.RuleSet(string, Action) AbstractValidator<UserDTO>.When(Func<UserDTO, bool>, Action) AbstractValidator<UserDTO>.When(Func<UserDTO, ValidationContext<UserDTO>, bool>, Action) AbstractValidator<UserDTO>.Unless(Func<UserDTO, bool>, Action) AbstractValidator<UserDTO>.Unless(Func<UserDTO, ValidationContext<UserDTO>, bool>, Action) AbstractValidator<UserDTO>.WhenAsync(Func<UserDTO, CancellationToken, Task<bool>>, Action) AbstractValidator<UserDTO>.WhenAsync(Func<UserDTO, ValidationContext<UserDTO>, CancellationToken, Task<bool>>, Action) AbstractValidator<UserDTO>.UnlessAsync(Func<UserDTO, CancellationToken, Task<bool>>, Action) AbstractValidator<UserDTO>.UnlessAsync(Func<UserDTO, ValidationContext<UserDTO>, CancellationToken, Task<bool>>, Action) AbstractValidator<UserDTO>.Include(IValidator<UserDTO>) AbstractValidator<UserDTO>.Include<TValidator>(Func<UserDTO, TValidator>) AbstractValidator<UserDTO>.GetEnumerator() AbstractValidator<UserDTO>.EnsureInstanceNotNull(object) AbstractValidator<UserDTO>.PreValidate(ValidationContext<UserDTO>, ValidationResult) AbstractValidator<UserDTO>.RaiseValidationException(ValidationContext<UserDTO>, ValidationResult) AbstractValidator<UserDTO>.OnRuleAdded(IValidationRule<UserDTO>) AbstractValidator<UserDTO>.CascadeMode AbstractValidator<UserDTO>.ClassLevelCascadeMode AbstractValidator<UserDTO>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserDtoValidator() public UserDtoValidator()"
  },
  "api/Iktan.Ecommerce.App.Validation.html": {
    "href": "api/Iktan.Ecommerce.App.Validation.html",
    "title": "Namespace Iktan.Ecommerce.App.Validation | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.App.Validation Classes UserDtoValidator"
  },
  "api/Iktan.Ecommerce.Domain.Core.CustomerDomain.html": {
    "href": "api/Iktan.Ecommerce.Domain.Core.CustomerDomain.html",
    "title": "Class CustomerDomain | Iktan.Ecommerce",
    "keywords": "Class CustomerDomain Namespace Iktan.Ecommerce.Domain.Core Assembly Iktan.Ecommerce.Domain.Core.dll public class CustomerDomain : ICustomerDomain Inheritance object CustomerDomain Implements ICustomerDomain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomerDomain(ICustomerRepository) public CustomerDomain(ICustomerRepository customerRepository) Parameters customerRepository ICustomerRepository Methods DeleteAsync(string) public Task<bool> DeleteAsync(string customerId) Parameters customerId string Returns Task<bool> GetAllAsync() public Task<IEnumerable<Customers>> GetAllAsync() Returns Task<IEnumerable<Customers>> GetAsync(string) public Task<Customers> GetAsync(string customerId) Parameters customerId string Returns Task<Customers> InsertAsync(Customers) public Task<bool> InsertAsync(Customers customers) Parameters customers Customers Returns Task<bool> UpdateAsync(Customers) public Task<bool> UpdateAsync(Customers customers) Parameters customers Customers Returns Task<bool>"
  },
  "api/Iktan.Ecommerce.Domain.Core.UserDomain.html": {
    "href": "api/Iktan.Ecommerce.Domain.Core.UserDomain.html",
    "title": "Class UserDomain | Iktan.Ecommerce",
    "keywords": "Class UserDomain Namespace Iktan.Ecommerce.Domain.Core Assembly Iktan.Ecommerce.Domain.Core.dll public class UserDomain : IUserDomain Inheritance object UserDomain Implements IUserDomain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserDomain(IUserRepository) public UserDomain(IUserRepository userRepository) Parameters userRepository IUserRepository Methods Authenticate(string, string) public Task<Users> Authenticate(string userName, string password) Parameters userName string password string Returns Task<Users>"
  },
  "api/Iktan.Ecommerce.Domain.Core.html": {
    "href": "api/Iktan.Ecommerce.Domain.Core.html",
    "title": "Namespace Iktan.Ecommerce.Domain.Core | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Domain.Core Classes CustomerDomain UserDomain"
  },
  "api/Iktan.Ecommerce.Domain.Entity.Customers.html": {
    "href": "api/Iktan.Ecommerce.Domain.Entity.Customers.html",
    "title": "Class Customers | Iktan.Ecommerce",
    "keywords": "Class Customers Namespace Iktan.Ecommerce.Domain.Entity Assembly Iktan.Ecommerce.Domain.Entity.dll public class Customers Inheritance object Customers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Address public string Address { get; set; } Property Value string City public string City { get; set; } Property Value string CompanyName public string CompanyName { get; set; } Property Value string ContactName public string ContactName { get; set; } Property Value string ContactTitle public string ContactTitle { get; set; } Property Value string Country public string Country { get; set; } Property Value string CustomerId public string CustomerId { get; set; } Property Value string Fax public string Fax { get; set; } Property Value string Phone public string Phone { get; set; } Property Value string PostalCode public string PostalCode { get; set; } Property Value string Region public string Region { get; set; } Property Value string"
  },
  "api/Iktan.Ecommerce.Domain.Entity.Users.html": {
    "href": "api/Iktan.Ecommerce.Domain.Entity.Users.html",
    "title": "Class Users | Iktan.Ecommerce",
    "keywords": "Class Users Namespace Iktan.Ecommerce.Domain.Entity Assembly Iktan.Ecommerce.Domain.Entity.dll public class Users Inheritance object Users Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstName public string FirstName { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string Password public string Password { get; set; } Property Value string Token public string Token { get; set; } Property Value string UserId public int UserId { get; set; } Property Value int UserName public string UserName { get; set; } Property Value string"
  },
  "api/Iktan.Ecommerce.Domain.Entity.html": {
    "href": "api/Iktan.Ecommerce.Domain.Entity.html",
    "title": "Namespace Iktan.Ecommerce.Domain.Entity | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Domain.Entity Classes Customers Users"
  },
  "api/Iktan.Ecommerce.Domain.Interface.ICustomerDomain.html": {
    "href": "api/Iktan.Ecommerce.Domain.Interface.ICustomerDomain.html",
    "title": "Interface ICustomerDomain | Iktan.Ecommerce",
    "keywords": "Interface ICustomerDomain Namespace Iktan.Ecommerce.Domain.Interface Assembly Iktan.Ecommerce.Domain.Interface.dll public interface ICustomerDomain Methods DeleteAsync(string) Task<bool> DeleteAsync(string customerId) Parameters customerId string Returns Task<bool> GetAllAsync() Task<IEnumerable<Customers>> GetAllAsync() Returns Task<IEnumerable<Customers>> GetAsync(string) Task<Customers> GetAsync(string customerId) Parameters customerId string Returns Task<Customers> InsertAsync(Customers) Task<bool> InsertAsync(Customers customers) Parameters customers Customers Returns Task<bool> UpdateAsync(Customers) Task<bool> UpdateAsync(Customers customers) Parameters customers Customers Returns Task<bool>"
  },
  "api/Iktan.Ecommerce.Domain.Interface.IUserDomain.html": {
    "href": "api/Iktan.Ecommerce.Domain.Interface.IUserDomain.html",
    "title": "Interface IUserDomain | Iktan.Ecommerce",
    "keywords": "Interface IUserDomain Namespace Iktan.Ecommerce.Domain.Interface Assembly Iktan.Ecommerce.Domain.Interface.dll public interface IUserDomain Methods Authenticate(string, string) Task<Users> Authenticate(string userName, string password) Parameters userName string password string Returns Task<Users>"
  },
  "api/Iktan.Ecommerce.Domain.Interface.html": {
    "href": "api/Iktan.Ecommerce.Domain.Interface.html",
    "title": "Namespace Iktan.Ecommerce.Domain.Interface | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Domain.Interface Interfaces ICustomerDomain IUserDomain"
  },
  "api/Iktan.Ecommerce.Infraestructure.Data.ConnectionFactory.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Data.ConnectionFactory.html",
    "title": "Class ConnectionFactory | Iktan.Ecommerce",
    "keywords": "Class ConnectionFactory Namespace Iktan.Ecommerce.Infraestructure.Data Assembly Iktan.Ecommerce.Infraestructure.Data.dll public class ConnectionFactory : IConnectionFactory Inheritance object ConnectionFactory Implements IConnectionFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConnectionFactory(IConfiguration) public ConnectionFactory(IConfiguration configuration) Parameters configuration IConfiguration Properties GetDbConnection public IDbConnection GetDbConnection { get; } Property Value IDbConnection"
  },
  "api/Iktan.Ecommerce.Infraestructure.Data.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Data.html",
    "title": "Namespace Iktan.Ecommerce.Infraestructure.Data | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Infraestructure.Data Classes ConnectionFactory"
  },
  "api/Iktan.Ecommerce.Infraestructure.Interface.ICustomerRepository.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Interface.ICustomerRepository.html",
    "title": "Interface ICustomerRepository | Iktan.Ecommerce",
    "keywords": "Interface ICustomerRepository Namespace Iktan.Ecommerce.Infraestructure.Interface Assembly Iktan.Ecommerce.Infraestructure.Interface.dll public interface ICustomerRepository Methods DeleteAsync(string) Task<bool> DeleteAsync(string customerId) Parameters customerId string Returns Task<bool> GetAllAsync() Task<IEnumerable<Customers>> GetAllAsync() Returns Task<IEnumerable<Customers>> GetAsync(string) Task<Customers> GetAsync(string customerId) Parameters customerId string Returns Task<Customers> InsertAsync(Customers) Task<bool> InsertAsync(Customers customers) Parameters customers Customers Returns Task<bool> UpdateAsync(Customers) Task<bool> UpdateAsync(Customers customers) Parameters customers Customers Returns Task<bool>"
  },
  "api/Iktan.Ecommerce.Infraestructure.Interface.IUserRepository.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Interface.IUserRepository.html",
    "title": "Interface IUserRepository | Iktan.Ecommerce",
    "keywords": "Interface IUserRepository Namespace Iktan.Ecommerce.Infraestructure.Interface Assembly Iktan.Ecommerce.Infraestructure.Interface.dll public interface IUserRepository Methods Authenticate(string, string) Task<Users> Authenticate(string userName, string password) Parameters userName string password string Returns Task<Users>"
  },
  "api/Iktan.Ecommerce.Infraestructure.Interface.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Interface.html",
    "title": "Namespace Iktan.Ecommerce.Infraestructure.Interface | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Infraestructure.Interface Interfaces ICustomerRepository IUserRepository"
  },
  "api/Iktan.Ecommerce.Infraestructure.Repository.CustomerRepository.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Repository.CustomerRepository.html",
    "title": "Class CustomerRepository | Iktan.Ecommerce",
    "keywords": "Class CustomerRepository Namespace Iktan.Ecommerce.Infraestructure.Repository Assembly Iktan.Ecommerce.Infraestructure.Repository.dll public class CustomerRepository : ICustomerRepository Inheritance object CustomerRepository Implements ICustomerRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomerRepository(IConnectionFactory) public CustomerRepository(IConnectionFactory connectionFactory) Parameters connectionFactory IConnectionFactory Methods DeleteAsync(string) public Task<bool> DeleteAsync(string customerId) Parameters customerId string Returns Task<bool> GetAllAsync() public Task<IEnumerable<Customers>> GetAllAsync() Returns Task<IEnumerable<Customers>> GetAsync(string) public Task<Customers> GetAsync(string customerId) Parameters customerId string Returns Task<Customers> InsertAsync(Customers) public Task<bool> InsertAsync(Customers customer) Parameters customer Customers Returns Task<bool> UpdateAsync(Customers) public Task<bool> UpdateAsync(Customers customer) Parameters customer Customers Returns Task<bool>"
  },
  "api/Iktan.Ecommerce.Infraestructure.Repository.UserRepository.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Repository.UserRepository.html",
    "title": "Class UserRepository | Iktan.Ecommerce",
    "keywords": "Class UserRepository Namespace Iktan.Ecommerce.Infraestructure.Repository Assembly Iktan.Ecommerce.Infraestructure.Repository.dll public class UserRepository : IUserRepository Inheritance object UserRepository Implements IUserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserRepository(IConnectionFactory) public UserRepository(IConnectionFactory connectionFactory) Parameters connectionFactory IConnectionFactory Methods Authenticate(string, string) public Task<Users> Authenticate(string userName, string password) Parameters userName string password string Returns Task<Users>"
  },
  "api/Iktan.Ecommerce.Infraestructure.Repository.html": {
    "href": "api/Iktan.Ecommerce.Infraestructure.Repository.html",
    "title": "Namespace Iktan.Ecommerce.Infraestructure.Repository | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Infraestructure.Repository Classes CustomerRepository UserRepository"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Controllers.CustomerController.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Controllers.CustomerController.html",
    "title": "Class CustomerController | Iktan.Ecommerce",
    "keywords": "Class CustomerController Namespace Iktan.Ecommerce.Service.WebAPI.Controllers Assembly Iktan.Ecommerce.Service.WebAPI.dll [Authorize] [ApiController] [Route(\"[controller]/[action]\")] public class CustomerController : ControllerBase Inheritance object ControllerBase CustomerController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomerController(ICustomerApplication) public CustomerController(ICustomerApplication customerApplication) Parameters customerApplication ICustomerApplication Methods CustomerReportAsync() [HttpGet] public Task<IActionResult> CustomerReportAsync() Returns Task<IActionResult> CustomerSearchAsync(string) [HttpGet(\"{CustomerId}\")] public Task<IActionResult> CustomerSearchAsync(string CustomerId) Parameters CustomerId string Returns Task<IActionResult> DiseableCustomerAsync(string) [HttpDelete(\"{CustomerId}\")] public Task<IActionResult> DiseableCustomerAsync(string CustomerId) Parameters CustomerId string Returns Task<IActionResult> RefreshCustomerAsync(CustomerDTO) [HttpPut] public Task<IActionResult> RefreshCustomerAsync(CustomerDTO customerDTO) Parameters customerDTO CustomerDTO Returns Task<IActionResult> RegistryCustomerAsync(CustomerDTO) [HttpPost] public Task<IActionResult> RegistryCustomerAsync(CustomerDTO customerDTO) Parameters customerDTO CustomerDTO Returns Task<IActionResult>"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Controllers.UserController.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Controllers.UserController.html",
    "title": "Class UserController | Iktan.Ecommerce",
    "keywords": "Class UserController Namespace Iktan.Ecommerce.Service.WebAPI.Controllers Assembly Iktan.Ecommerce.Service.WebAPI.dll [Authorize] [Route(\"[controller]/[action]\")] [ApiController] public class UserController : ControllerBase Inheritance object ControllerBase UserController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserController(IUserApplication, IOptions<AppSettings>) public UserController(IUserApplication userApplication, IOptions<AppSettings> appSettings) Parameters userApplication IUserApplication appSettings IOptions<AppSettings> Methods UserAccess(UserDTO) [AllowAnonymous] [HttpPost] public Task<IActionResult> UserAccess(UserDTO userDTO) Parameters userDTO UserDTO Returns Task<IActionResult>"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Controllers.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Controllers.html",
    "title": "Namespace Iktan.Ecommerce.Service.WebAPI.Controllers | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Service.WebAPI.Controllers Classes CustomerController UserController"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Helpers.AppSettings.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Helpers.AppSettings.html",
    "title": "Class AppSettings | Iktan.Ecommerce",
    "keywords": "Class AppSettings Namespace Iktan.Ecommerce.Service.WebAPI.Helpers Assembly Iktan.Ecommerce.Service.WebAPI.dll public class AppSettings Inheritance object AppSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Audience public string Audience { get; set; } Property Value string Issuer public string Issuer { get; set; } Property Value string OriginCors public string OriginCors { get; set; } Property Value string Secret public string Secret { get; set; } Property Value string"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Helpers.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Helpers.html",
    "title": "Namespace Iktan.Ecommerce.Service.WebAPI.Helpers | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Service.WebAPI.Helpers Classes AppSettings"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Authentication.AuthenticationExtensions.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Authentication.AuthenticationExtensions.html",
    "title": "Class AuthenticationExtensions | Iktan.Ecommerce",
    "keywords": "Class AuthenticationExtensions Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Authentication Assembly Iktan.Ecommerce.Service.WebAPI.dll public static class AuthenticationExtensions Inheritance object AuthenticationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAuthentication(IServiceCollection, IConfiguration) public static IServiceCollection AddAuthentication(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration Returns IServiceCollection"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Authentication.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Authentication.html",
    "title": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Authentication | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Authentication Classes AuthenticationExtensions"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Feature.FeatureExtensions.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Feature.FeatureExtensions.html",
    "title": "Class FeatureExtensions | Iktan.Ecommerce",
    "keywords": "Class FeatureExtensions Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Feature Assembly Iktan.Ecommerce.Service.WebAPI.dll public static class FeatureExtensions Inheritance object FeatureExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddFeature(IServiceCollection, IConfiguration, string) public static IServiceCollection AddFeature(this IServiceCollection services, IConfiguration configuration, string policyName) Parameters services IServiceCollection configuration IConfiguration policyName string Returns IServiceCollection"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Feature.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Feature.html",
    "title": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Feature | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Feature Classes FeatureExtensions"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Injection.InjectionExtensions.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Injection.InjectionExtensions.html",
    "title": "Class InjectionExtensions | Iktan.Ecommerce",
    "keywords": "Class InjectionExtensions Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Injection Assembly Iktan.Ecommerce.Service.WebAPI.dll public static class InjectionExtensions Inheritance object InjectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInjection(IServiceCollection, IConfiguration) public static IServiceCollection AddInjection(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration Returns IServiceCollection"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Injection.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Injection.html",
    "title": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Injection | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Injection Classes InjectionExtensions"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Swagger.SwaggerExtensions.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Swagger.SwaggerExtensions.html",
    "title": "Class SwaggerExtensions | Iktan.Ecommerce",
    "keywords": "Class SwaggerExtensions Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Swagger Assembly Iktan.Ecommerce.Service.WebAPI.dll public static class SwaggerExtensions Inheritance object SwaggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSwagger(IServiceCollection) public static IServiceCollection AddSwagger(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Swagger.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Swagger.html",
    "title": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Swagger | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Swagger Classes SwaggerExtensions"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Validator.ValidatorExtensions.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Validator.ValidatorExtensions.html",
    "title": "Class ValidatorExtensions | Iktan.Ecommerce",
    "keywords": "Class ValidatorExtensions Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Validator Assembly Iktan.Ecommerce.Service.WebAPI.dll public static class ValidatorExtensions Inheritance object ValidatorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddValidator(IServiceCollection) public static IServiceCollection AddValidator(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Iktan.Ecommerce.Service.WebAPI.Modules.Validator.html": {
    "href": "api/Iktan.Ecommerce.Service.WebAPI.Modules.Validator.html",
    "title": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Validator | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Service.WebAPI.Modules.Validator Classes ValidatorExtensions"
  },
  "api/Iktan.Ecommerce.Transversal.Common.IAppLogger-1.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Common.IAppLogger-1.html",
    "title": "Interface IAppLogger<T> | Iktan.Ecommerce",
    "keywords": "Interface IAppLogger<T> Namespace Iktan.Ecommerce.Transversal.Common Assembly Iktan.Ecommerce.Transversal.Common.dll public interface IAppLogger<T> Type Parameters T Methods LogError(string, params object[]) void LogError(string message, params object[] args) Parameters message string args object[] LogInformation(string, params object[]) void LogInformation(string message, params object[] args) Parameters message string args object[] LogWarning(string, params object[]) void LogWarning(string message, params object[] args) Parameters message string args object[]"
  },
  "api/Iktan.Ecommerce.Transversal.Common.IConnectionFactory.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Common.IConnectionFactory.html",
    "title": "Interface IConnectionFactory | Iktan.Ecommerce",
    "keywords": "Interface IConnectionFactory Namespace Iktan.Ecommerce.Transversal.Common Assembly Iktan.Ecommerce.Transversal.Common.dll public interface IConnectionFactory Properties GetDbConnection IDbConnection GetDbConnection { get; } Property Value IDbConnection"
  },
  "api/Iktan.Ecommerce.Transversal.Common.Response-1.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Common.Response-1.html",
    "title": "Class Response<T> | Iktan.Ecommerce",
    "keywords": "Class Response<T> Namespace Iktan.Ecommerce.Transversal.Common Assembly Iktan.Ecommerce.Transversal.Common.dll public class Response<T> Type Parameters T Inheritance object Response<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data public T Data { get; set; } Property Value T Errors public IEnumerable<ValidationFailure> Errors { get; set; } Property Value IEnumerable<ValidationFailure> IsSuccess public bool IsSuccess { get; set; } Property Value bool Message public string Message { get; set; } Property Value string"
  },
  "api/Iktan.Ecommerce.Transversal.Common.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Common.html",
    "title": "Namespace Iktan.Ecommerce.Transversal.Common | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Transversal.Common Classes Response<T> Interfaces IAppLogger<T> IConnectionFactory"
  },
  "api/Iktan.Ecommerce.Transversal.Logging.LoggerAdapter-1.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Logging.LoggerAdapter-1.html",
    "title": "Class LoggerAdapter<T> | Iktan.Ecommerce",
    "keywords": "Class LoggerAdapter<T> Namespace Iktan.Ecommerce.Transversal.Logging Assembly Iktan.Ecommerce.Transversal.Logging.dll public class LoggerAdapter<T> : IAppLogger<T> Type Parameters T Inheritance object LoggerAdapter<T> Implements IAppLogger<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoggerAdapter(ILoggerFactory) public LoggerAdapter(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory Methods LogError(string, params object[]) public void LogError(string message, params object[] args) Parameters message string args object[] LogInformation(string, params object[]) public void LogInformation(string message, params object[] args) Parameters message string args object[] LogWarning(string, params object[]) public void LogWarning(string message, params object[] args) Parameters message string args object[]"
  },
  "api/Iktan.Ecommerce.Transversal.Logging.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Logging.html",
    "title": "Namespace Iktan.Ecommerce.Transversal.Logging | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Transversal.Logging Classes LoggerAdapter<T>"
  },
  "api/Iktan.Ecommerce.Transversal.Mapper.MappingsProfile.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Mapper.MappingsProfile.html",
    "title": "Class MappingsProfile | Iktan.Ecommerce",
    "keywords": "Class MappingsProfile Namespace Iktan.Ecommerce.Transversal.Mapper Assembly Iktan.Ecommerce.Transversal.Mapper.dll public class MappingsProfile : Profile, IProfileExpression, IProfileConfiguration Inheritance object Profile MappingsProfile Implements IProfileExpression IProfileConfiguration Inherited Members Profile.DisableConstructorMapping() Profile.CreateProjection<TSource, TDestination>() Profile.CreateProjection<TSource, TDestination>(MemberList) Profile.CreateMap<TSource, TDestination>() Profile.CreateMap<TSource, TDestination>(MemberList) Profile.CreateMap(Type, Type) Profile.CreateMap(Type, Type, MemberList) Profile.ClearPrefixes() Profile.ReplaceMemberName(string, string) Profile.RecognizePrefixes(params string[]) Profile.RecognizePostfixes(params string[]) Profile.RecognizeDestinationPrefixes(params string[]) Profile.RecognizeDestinationPostfixes(params string[]) Profile.AddGlobalIgnore(string) Profile.IncludeSourceExtensionMethods(Type) Profile.ProfileName Profile.AllowNullDestinationValues Profile.AllowNullCollections Profile.ShouldMapProperty Profile.ShouldMapField Profile.ShouldMapMethod Profile.ShouldUseConstructor Profile.SourceMemberNamingConvention Profile.DestinationMemberNamingConvention Profile.ValueTransformers object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappingsProfile() public MappingsProfile()"
  },
  "api/Iktan.Ecommerce.Transversal.Mapper.html": {
    "href": "api/Iktan.Ecommerce.Transversal.Mapper.html",
    "title": "Namespace Iktan.Ecommerce.Transversal.Mapper | Iktan.Ecommerce",
    "keywords": "Namespace Iktan.Ecommerce.Transversal.Mapper Classes MappingsProfile"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Iktan.Ecommerce",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}